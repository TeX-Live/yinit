% This is the yinit.mf driver file.
% Whole font released to the public domain.
if unknown cmbase: input cmbase fi
input yintbase                % -sl   15-3-1991

font_identifier:="YINIT";

u#:=160/36pt#;
v#:=160/36pt#;
font_size 8.7u#;

width_adj#:=0pt#;    % width adjustment for certain characters
serif_fit#:=0pt#;    % extra sidebar near lowercase serifs
cap_serif_fit#:=40/36pt#;  % extra sidebar near uppercase serifs
letter_fit#:=0pt#;    % extra space added to all sidebars

body_height#:=40pt#;  % height of tallest characters
asc_height#:=40pt#;    % height of lowercase ascenders
cap_height#:=40pt#;    % height of caps
fig_height#:=40pt#;    % height of numerals
x_height#:=800/36pt#;  % height of lowercase without ascenders
math_axis#:=720/36pt#;  % axis of symmetry for math symbols
bar_height#:=320/36pt#;   % height of crossbar in lowercase e
comma_depth#:=560/36pt#;    % depth of comma below baseline
desc_depth#:=560/36pt#;   % depth of lowercase descenders

crisp#:=0pt#;    % diameter of serif corners
tiny#:=32/36pt#;      % diameter of rounded corners
fine#:=28/36pt#;      % diameter of sharply rounded corners
thin_join#:=28/36pt#;    % width of extrafine details
numeric m; m:=1;
hair#:=2/36u#;
stem#:=200/36pt#;    % lowercase stem breadth
curve#:=240/36pt#;    % lowercase curve breadth
ess#:=216/36pt#;      % breadth in middle of lowercase s
flare#:=264/36pt#;    % diameter of bulbs or breadth of terminals
dot_size#:=288/36pt#;    % diameter of dots
cap_hair#:=88/36pt#;    % uppercase hairline breadth
cap_stem#:=256/36pt#;    % uppercase stem breadth
cap_curve#:=296/36pt#;  % uppercase curve breadth
cap_ess#:=280/36pt#;    % breadth in middle of uppercase s
rule_thickness#:=1.6pt#;    % thickness of lines in math symbols

dish#:=8/36pt#;      % amount erased at top or bottom of serifs
bracket#:=160/36pt#;    % vertical distance from serif base to tangent
jut#:=224/36pt#;      % protrusion of lowercase serifs
cap_jut#:=296/36pt#;    % protrusion of uppercase serifs
beak_jut#:=80/36pt#;    % horizontal protrusion of beak serifs
beak#:=560/36pt#;    % vertical protrusion of beak serifs
vair#:=64/36pt#;      % vertical diameter of hairlines
notch_cut#:=80pt#;    % maximum breadth above or below notches
bar#:=88/36pt#;      % lowercase bar thickness
slab#:=88/36pt#;    % serif and arm thickness
cap_bar#:=88/36pt#;    % uppercase bar thickness
cap_band#:=88/36pt#;    % uppercase thickness above/below lobes
cap_notch_cut#:=80pt#;   % max breadth above/below uppercase notches
serif_drop#:=32/36pt#;  % vertical drop of sloped serifs
stem_corr#:=8/36pt#;    % for small refinements of stem breadth
vair_corr#:=8/36pt#;    % for small refinements of hairline height
apex_corr#:=0pt#;    % extra width at diagonal junctions

o#:=64/36pt#;   % amount of overshoot for curves
apex_o#:=64/36pt#;    % amount of overshoot for diagonal junctions

slant:=0;      % tilt ratio $(\Delta x/\Delta y)$
fudge:=1;      % factor applied to weights of heavy characters
math_spread:=0;      % extra openness of math symbols
superness:=1/sqrt2;    % parameter for superellipses
superpull:=1/6;      % extra openness inside bowls
beak_darkness:=11/30;  % fraction of triangle inside beak serifs
ligs:=2;      % level of ligatures to be included

square_dots:=false;    % should dots be square?
hefty:=false;    % should we try hard not to be overweight?
serifs:=true;    % should serifs and bulbs be attached?
monospace:=false;    % should all characters have the same width?
variant_g:=false;    % should an italic-style g be used?
low_asterisk:=false;    % should the asterisk be centered at the axis?
math_fitting:=false;    % should math-mode spacing be used?
mode_setup;
font_setup;
u:=160/36pt;
v:=160/36pt; uv:=u;
boolean zero_depth;
zero_depth:=true;
%readfrom("yinitbase");       % -sl   15-3-1991
generate yinitA; 
generate yinitB;
generate yinitC;
generate yinitD;
generate yinitE;
generate yinitF;
generate yinitG;
generate yinitH;
generate yinitJ;
generate yinitK;
generate yinitL;
generate yinitM;
generate yinitN;
generate yinitO;
generate yinitP;
generate yinitQ;
generate yinitR;
generate yinitS;
generate yinitT;
generate yinitU;
generate yinitV;
generate yinitW;
generate yinitX;
generate yinitY;
generate yinitZ;
end.
